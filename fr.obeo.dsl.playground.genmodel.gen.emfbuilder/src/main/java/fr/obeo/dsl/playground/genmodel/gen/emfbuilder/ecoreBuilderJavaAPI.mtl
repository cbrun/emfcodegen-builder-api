[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateBuilderAPI.
 * @author cedric
 * @version 1.0.0
 * @since 1.0.0
 */]

[module ecoreBuilderJavaAPI('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel')/]
[import fr::obeo::dsl::playground::genmodel::gen::emfbuilder::GenModelServices/]

[comment @main/]
[template public generateAPI(genModel : genmodel::GenModel)]

[for (genPackage | genModel.genPackages)]
[file (genPackage.folderPath() + 'builder/' + genPackage.builderFactoryName() + '.java', overwrite, 'UTF-8')]
  package [genPackage.basePackage/].builder;
  
  public class [genPackage.builderFactoryName()/] {

[for (clazz | genPackage.genClasses->select(i | not(i.ecoreClass.abstract) and not(i.ecoreClass.interface) and i.hasFactoryInterfaceCreateMethod()))]            
    /**
      * Create a new builder for the type [clazz.name()/].
      * [clazz.documentation/]
      * @see [clazz.qualifiedInterfaceName()/]
      * @return the newly created builder for the type [clazz.name()/].
      */
      public [clazz.builderClassName()/] new[clazz.name()/]() {
          return new [clazz.builderClassName()/]();
      }
[/for]

  }
[/file]
[/for] 
[for (genClass | genModel.genPackages.genClasses)]
    [file (genClass.genPackage.folderPath() + 'builder/'+ genClass.builderClassName() + '.java', overwrite, 'UTF-8')]
     [genClass.generateBuilderInterface()/]
    [/file]
[/for]
 
[/template]


[template private generateBuilderInterface(genClass : genmodel::GenClass)]
  package [genClass.genPackage.basePackage/].builder;

  [genClass.builderInterfaceClassDeclaration()/]

  [for (feat | genClass.allGenFeatures()->select(e |not e.ecoreFeature.derived and e.ecoreFeature.changeable))]
    [if (not feat.ecoreFeature.many)]
          /** 
           * @param values :[feat.javadoc()/]
           * @generated
           */
          public [genClass.builderClassName()/] [feat.safeName()/]( [feat.listItemType()/] value) {
              getBeingBuilt().set[feat.accessorName()/](value);
              return this;
          }
    [else]
          /**
            * @param value :[feat.javadoc()/] 
            * @generated
            */
          public [genClass.builderClassName()/] [feat.safeName()/]( [feat.listItemType()/] ... values) {
            for ([feat.listItemType()/] value : values) {
                 getBeingBuilt().get[feat.accessorName()/]().add(value);
            }
            return this;
          }
    [/if]
  [/for]
  }
[/template]


[query public builderFactoryName(pak : genmodel::GenPackage) : String = pak.prefix + 'Builders'/]

[query public builderClassName(clazz : genmodel::GenClass) : String = clazz.name() + 'Builder'/]

[template public builderInterfaceClassDeclaration(genClass : genmodel::GenClass)]
  /**
   * [genClass.javadoc()/]
   */
    [if (not genClass.ecoreClass.abstract) ]
      public class [genClass.builderClassName()/] [genClass.extendBuilders()/]{
      
         private [genClass.qualifiedInterfaceName()/] beingBuilt = [genClass.genPackage.qualifiedEFactoryInternalInstanceAccessor()/]
                 .create[genClass.name()/]();
          /**
           * @generated
           */
           protected [genClass.qualifiedInterfaceName()/] getBeingBuilt() {
               return this.beingBuilt;
           }
           
          /**
           * @generated
           */
           public [genClass.qualifiedInterfaceName()/] build() {
               return this.getBeingBuilt();
           }
    [else]
       public abstract class [genClass.builderClassName()/] [genClass.extendBuilders()/]{
     
          /**
           * @generated
           */
           abstract protected [genClass.qualifiedName()/] getBeingBuilt();[/if]
[/template]

[template public extendBuilders(genClass : genmodel::GenClass)]
[if (genClass.classExtendsGenClass() <> null)]
   extends [genClass.classExtendsGenClass().builderClassName()/]
[/if]
[/template]

[template public javadoc(feat : genmodel::GenFeature )]
  The [feat.ecoreFeature.eType.name/] to set as [feat.ecoreFeature.name/].[if (feat.ecoreFeature.lowerBound>0)] This is a <b>required</b> attribute.[/if]
[/template]
[template public javadoc(c : genmodel::GenClass )] A builder for the {@link [c.ecoreClass.name/]}  type.[/template]

